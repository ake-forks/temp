version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

# Define reusable commands that can be used as steps
commands:
  setup_aws_cli:
    description: |
      Install aws-cli and runs setup

      Assumes the following Environment Variables have been setup:
      AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION
    steps:
      - run:
          name: Manually Install AWS CLI
          command: |
            # We manually do this rather than let the aws-cli orb do it for us because
            # when the orb installs the cli there's a conflict with the libgcc version
            apk add --no-cache \
              aws-cli=1.22.81-r0

            # aws-cli/setup errors if this file does not exist
            # We have our AWS credentials setup in the project config in CircleCi
            touch "$BASH_ENV"
      - aws-cli/setup
  ecr_push_image:
    description: |
      Push the given docker image

      Assumes that the image you want to push is built and tagged "<< parameters.image_name >>:$CIRCLE_SHA1"
      Assumes the following Environment Variables have been setup:
      AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION
    parameters:
      image_name:
        description: The name of the image you want to push, see command description
        type: string
    steps:
      - setup_aws_cli
      - run:
          name: Push Image to ECR
          command: |
            # >> Config
            region="$AWS_DEFAULT_REGION"
            # Currently will always be the same account
            account_id=713170488151

            # >> Login
            ecr_endpoint="$account_id.dkr.ecr.$region.amazonaws.com"
            aws ecr get-login-password --region $region | docker login --username AWS --password-stdin $ecr_endpoint

            # >> Tag & Push
            # The format for this is:
            # <account ecr endpoint>/<image name>:<docker tag>
            # In our case the docker tag is the git hash so we can track down which commit is running
            new_docker_tag="$ecr_endpoint/<< parameters.image_name >>:${CIRCLE_SHA1}"
            docker tag "<< parameters.image_name >>:$CIRCLE_SHA1" $new_docker_tag
            docker push $new_docker_tag


# Define the jobs we want to run for this project
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Application Docker Image
          command: |
            diff_fmt() {
              diff=$1
              
              mins=$(($diff / 60))
              secs=$(($diff % 60))

              out=""
              [ $mins != "0" ] && {
                out="${mins}m "
              }
              out="$out${secs}s"

              printf '%7s' "$out"
            }

            time_diff() {
              curr=$1
              prev=$2

              echo "$(($curr - $prev))"
            }

            START_TIME="$(date +%s)"
            PREV_TIME=$START_TIME

            echo "  start(   prev) | log line"
            docker build -t probatetree:$CIRCLE_SHA1 . | \
              while read line ; do \
                now="$(date +%s)"; \
                since_start="$(diff_fmt $(time_diff $now $START_TIME))"; \
                since_last_print="$(diff_fmt $(time_diff $now $PREV_TIME))"; \
                echo "$since_start($since_last_print) | $line"; \
                PREV_TIME="$now"; \
              done
      - ecr_push_image:
          image_name: probatetree
  # Relies on the image build by `build`
  test:
    working_directory: /app
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Application Tests
          command: docker run probatetree:$CIRCLE_SHA1 clj -A:runner
  deploy:
    working_directory: /app
    docker:
      - image: hashicorp/terraform:1.2.9
    parameters:
      workspace:
        description: The terraform workspace to deploy
        type: string
    steps:
      - checkout
      - setup_aws_cli
      - run:
          name: Terraform Init
          working_directory: ./infra/app
          command: |
            terraform init -input=false
            terraform workspace select << parameters.workspace >>
      - run:
          name: Terraform Plan
          working_directory: ./infra/app
          command: terraform plan -out tfapply -var "probatetree_docker_tag=${CIRCLE_SHA1}"
      - run:
          name: Terraform Apply
          working_directory: ./infra/app
          command: terraform apply -auto-approve tfapply

# Orchestrate our job run sequence
workflows:
  build:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          name: Deploy to Staging
          workspace: staging
          filters:
            branches:
              only: staging
          requires:
            - test
      - deploy:
          name: Deploy to Production
          workspace: production
          filters:
            branches:
              only: production
          requires:
            - test
