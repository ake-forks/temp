version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

# Define reusable commands that can be used as steps
commands:
  ecr_push_image:
    description: |
      Push the given docker image to the specified environment
      Assumes that the image you want to push is built and tagged "$image_name:latest"
      Assumes the following Environment Variables have been setup:
      <environment>_AWS_ACCESS_KEY_ID
      <environment>_AWS_SECRET_ACCESS_KEY
    parameters:
      environment:
        description: The environment to push the image to, see command description
        type: string
      image_name:
        description: The name of the image you want to push, see command description
        type: string
    steps:
      - run:
          name: Setup AWS Environment
          command: |
            # Environment Variables can't be passed between steps
            # So we store them in $BASH_ENV, where they are later sourced
            # https://circleci.com/docs/env-vars (search for "BASH_ENV")
            touch "$BASH_ENV"
            echo 'export AWS_ACCESS_KEY_ID="${<< parameters.environment >>_AWS_ACCESS_KEY_ID}"' >> "$BASH_ENV"
            echo 'export AWS_SECRET_ACCESS_KEY="${<< parameters.environment >>_AWS_SECRET_ACCESS_KEY}"' >> "$BASH_ENV"
      - run:
          name: Install AWS CLI
          command: |
            # We manually do this rather than let the aws-cli orb do it for us because
            # when the orb installs the cli there's a conflict with the libgcc version
            apk add --no-cache \
              aws-cli=1.22.81-r0
      - aws-cli/setup:
          profile-name: << parameters.environment >>
      - run:
          name: Push Image to ECR
          command: |
            aws configure list

            # >> Config
            region=eu-west-2
            # Currently will always be the same account
            # If this changes just add another env variable <environment>_ACCOUNT_ID
            account_id=713170488151

            # >> Login
            ecr_endpoint="$account_id.dkr.ecr.$region.amazonaws.com"
            aws ecr get-login-password --region $region | docker login --username AWS --password-stdin $ecr_endpoint

            # >> Tag & Push
            docker tag "$image_name:latest" "$ecr_endpoint/$image_name:${CIRCLE_SHA1}"
            docker push "$ecr_endpoint/$image_name:${CIRCLE_SHA1}"


# Define the jobs we want to run for this project
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:20.10.18-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Application Docker Image
          command: docker build -t darbylaw-production:latest .
      - ecr_push_image:
          environment: production
          image_name: darbylaw-production

# Orchestrate our job run sequence
workflows:
  build:
    jobs:
      - build
